{"version":3,"file":"static/js/242.82a0fc3f.chunk.js","mappings":"+SAEMA,EAAM,mCACNC,EAAW,gCAEV,SAASC,IACd,OAAOC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,oCAAiDD,GACzD,CAEM,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,8EACCC,EAAWH,EAAAA,EAAAA,IAAA,UACZF,EADY,iBACKI,EADL,oBACwBL,EADxB,oBADZ,kBAKEM,GALF,kEAQA,SAASC,EAAeF,GAC7B,OAAOF,EAAAA,EAAAA,IAAA,UACFF,EADE,iBACeI,EADf,4BAC0CL,EAD1C,mBAGR,CAEM,SAASQ,EAAkBH,GAChC,OAAOF,EAAAA,EAAAA,IAAA,UACFF,EADE,iBACeI,EADf,4BAC0CL,EAD1C,oBAGR,CAEM,SAAeS,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,uFACkBP,EAAAA,EAAAA,IAAA,UAClBF,EADkB,gCACcD,EADd,4DACqEU,IAFvF,cACCJ,EADD,yBAKEA,EAASK,KAAKC,SALhB,kE,wKC3BMC,EAAmBC,EAAAA,EAAAA,OAAH,ygBAqBhBC,EAAaD,EAAAA,EAAAA,KAAH,8KAUVE,EAAuBF,EAAAA,EAAAA,KAAH,6MAYpBG,EAAkBH,EAAAA,EAAAA,MAAH,8U,SCyC5B,EA5Ee,WACb,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOP,EAAP,KAAaQ,EAAb,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAWF,EAAaG,IAAI,SAC5BC,GAAWC,EAAAA,EAAAA,MAmCjB,OAdAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,gGAEqB,OAAbJ,EAFR,kEAG0Bd,EAAAA,EAAAA,IAAiBc,GAH3C,OAGUX,EAHV,OAKIO,EAAQP,GALZ,gDAOIgB,MAAM,KAAIC,SAPd,0DADc,uBAAC,WAAD,wBAWdC,EACD,GAAE,CAACP,KAGF,gCACG,KACD,UAACR,EAAD,CAAYgB,SApCK,SAAAC,GACnBA,EAAEC,iBAC2C,KAAzCD,EAAEE,OAAOC,SAASC,MAAM1B,MAAM2B,QAChCT,MAAM,mBAER,IAAMU,EAAON,EAAEE,OACfZ,EAAgB,CAAEc,MAAOE,EAAKH,SAASC,MAAM1B,QAC7C4B,EAAKC,OACN,EA4BG,WACE,SAACtB,EAAD,CACEuB,KAAK,QACLC,MAAM,YACNC,GAAG,iBACHC,MAAM,cACNC,QAAQ,cAEV,SAAC/B,EAAD,CACEgC,KAAK,SACLD,QAAQ,WACRE,KAAK,SACLC,GAAI,CAAEC,GAAI,GAJZ,UAME,SAAChC,EAAD,0BAGHL,IACC,wBACGA,EAAKsC,KAAI,SAAAC,GACR,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAGR,IAAMU,MAAO,CAAEC,KAAM5B,GAA7C,SACGyB,EAAGI,SAFCJ,EAAGR,GAMf,QAKV,C","sources":["components/services/api.js","pages/movies.styled.jsx","pages/Movies.js"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = '9391d9eb657d7ce69073c80004150e40';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport function fetchTrendingMovies() {\n  return axios.get(`${BASE_URL}trending/all/day?api_key=${KEY}`);\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const response = axios.get(\n    `${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n\n  return response;\n}\n\nexport function fetchMovieCast(movieId) {\n  return axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieReviews(movieId) {\n  return axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&`\n  );\n}\n\nexport async function fetchMovieSearch(value) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${value}`\n  );\n\n  return response.data.results;\n  // return axios.get(\n  //   `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${value}`\n  // );\n}\n","import styled from '@emotion/styled';\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 35px;\n  height: 26px;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  background-image: url('https://img.icons8.com/ios-filled/256/search--v1.png');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchFormButtonSpan = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 200px;\n  font: inherit;\n  font-size: 20px;\n  padding-left: 4px;\n  padding-right: 4px;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #bdbdbd;\n  border-radius: 0.25rem;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { fetchMovieSearch } from 'components/services/api';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport {\n  SearchForm,\n  SearchFormButton,\n  SearchFormButtonSpan,\n  SearchFormInput,\n} from './movies.styled';\n\nconst Movies = () => {\n  const [data, setData] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const filmName = searchParams.get('query');\n  const location = useLocation();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (e.target.elements.query.value.trim() === '') {\n      alert('Right something');\n    }\n    const form = e.target;\n    setSearchParams({ query: form.elements.query.value });\n    form.reset();\n  };\n\n  // useEffect(() => {\n  //   if (filmName === null) return;\n\n  //   fetchMovieSearch(filmName)\n  //     .then(results => {\n  //       setData(results.data.results);\n  //     })\n  //     .catch(err => console.log(err));\n  // }, [filmName]);\n  useEffect(() => {\n    async function getValue() {\n      try {\n        if (filmName === null) return;\n        const results = await fetchMovieSearch(filmName);\n\n        setData(results);\n      } catch (err) {\n        alert(err.message);\n      }\n    }\n    getValue();\n  }, [filmName]);\n\n  return (\n    <>\n      {' '}\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormInput\n          name=\"query\"\n          color=\"secondary\"\n          id=\"outlined-basic\"\n          label=\"Search Film\"\n          variant=\"outlined\"\n        ></SearchFormInput>\n        <SearchFormButton\n          type=\"submit\"\n          variant=\"outlined\"\n          size=\"medium\"\n          sx={{ ml: 2 }}\n        >\n          <SearchFormButtonSpan>Search</SearchFormButtonSpan>\n        </SearchFormButton>\n      </SearchForm>\n      {data && (\n        <ul>\n          {data.map(el => {\n            return (\n              <li key={el.id}>\n                <Link to={`/movies/${el.id}`} state={{ from: location }}>\n                  {el.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["KEY","BASE_URL","fetchTrendingMovies","axios","fetchMovieDetails","movieId","response","fetchMovieCast","fetchMovieReviews","fetchMovieSearch","value","data","results","SearchFormButton","styled","SearchForm","SearchFormButtonSpan","SearchFormInput","useState","setData","useSearchParams","searchParams","setSearchParams","filmName","get","location","useLocation","useEffect","alert","message","getValue","onSubmit","e","preventDefault","target","elements","query","trim","form","reset","name","color","id","label","variant","type","size","sx","ml","map","el","to","state","from","title"],"sourceRoot":""}